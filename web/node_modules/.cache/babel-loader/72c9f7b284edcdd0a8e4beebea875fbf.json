{"ast":null,"code":"var _jsxFileName = \"/Users/sky/Documents/Vaultv2/web/src/parts/ipfsUpload.comp.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Progress } from 'reactstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar hash;\n\nclass IpfsUpload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkMimeType = event => {\n      //getting file object\n      let files = event.target.files; //define message container\n\n      let err = []; // list allow mime type\n\n      const types = ['image/png', 'image/jpeg', 'image/gif']; // loop access array\n      //for(var x = 0; x<files.length; x++) {\n      // compare file type find doesn't matach\n\n      if (types.every(type => files[0].type !== type)) {\n        // create error message and assign to container   \n        err[0] = files[0].type + ' is not a supported format\\n';\n      } //};\n\n\n      for (var z = 0; z < err.length; z++) {\n        // if message not same old that mean has error \n        // discard selected file\n        toast.error(err[z]);\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.maxSelectFile = event => {\n      let files = event.target.files;\n\n      if (files.length > 1) {\n        const msg = 'Only 1 image can be uploaded at a time';\n        event.target.value = null;\n        toast.warn(msg);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkFileSize = event => {\n      let files = event.target.files;\n      let size = 2000000;\n      let err = [];\n\n      for (var x = 0; x < files.length; x++) {\n        if (files[x].size > size) {\n          err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\n        }\n      }\n\n      ;\n\n      for (var z = 0; z < err.length; z++) {\n        // if message not same old that mean has error \n        // discard selected file\n        toast.error(err[z]);\n        event.target.value = null;\n      }\n\n      return true;\n    };\n\n    this.onChangeHandler = event => {\n      var files = event.target.files;\n\n      if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\n        // if return true allow to setState\n        this.setState({\n          selectedFile: files,\n          loaded: 0\n        });\n      }\n    };\n\n    this.onClickHandler = () => {\n      const data = new FormData();\n\n      if (this.state.selectedFile == null) {\n        toast.error('You must select a file');\n      } else {\n        for (var x = 0; x < this.state.selectedFile.length; x++) {\n          data.append('file', this.state.selectedFile[x]);\n        } //To use locally\n\n\n        axios.post(\"http://localhost:8000/upload\", data, {\n          //With heroku\n          //axios.post(\"https://vaultv2.herokuapp.com:8000/upload\", data, {\n          onUploadProgress: ProgressEvent => {\n            this.setState({\n              loaded: ProgressEvent.loaded / ProgressEvent.total * 100\n            });\n          }\n        }).then(res => {\n          // then print response status\n          hash = res.data;\n          this.props.parentCallback(this.setState({\n            showHide3: true\n          }));\n          toast.success('upload success');\n        }).catch(err => {\n          // then print response status\n          toast.error('upload fail');\n          console.log(err);\n        });\n      }\n    };\n\n    this.state = {\n      selectedFile: null,\n      loaded: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"offset-md-3 col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group files\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                color: \"white\"\n              },\n              children: \"Upload Your File \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              className: \"form-control\",\n              multiple: true,\n              onChange: this.onChangeHandler,\n              style: {\n                \"outline\": \"2px dashed #92b0b3\",\n                \"outlineOffset\": \"-10px\",\n                \"WebkitTransition\": \"outline-offset .15s ease-in-out, background-color .15s linear\",\n                \"transition\": \"outline-offset .15s ease-in-out, background-color .15s linear\",\n                \"padding\": \"120px 0px 85px 35%\",\n                \"textAlign\": \"center !important\",\n                \"backgroundColor\": \"black\",\n                \"color\": \"white\",\n                \"margin\": \"0\",\n                \"width\": \"100% !important\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Progress, {\n              max: \"100\",\n              color: \"success\",\n              value: this.state.loaded,\n              children: [Math.round(this.state.loaded, 2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-success btn-block\",\n            onClick: this.onClickHandler,\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport { hash };\nexport default IpfsUpload;","map":{"version":3,"sources":["/Users/sky/Documents/Vaultv2/web/src/parts/ipfsUpload.comp.js"],"names":["React","Component","axios","Progress","ToastContainer","toast","hash","IpfsUpload","constructor","props","checkMimeType","event","files","target","err","types","every","type","z","length","error","value","maxSelectFile","msg","warn","checkFileSize","size","x","onChangeHandler","setState","selectedFile","loaded","onClickHandler","data","FormData","state","append","post","onUploadProgress","ProgressEvent","total","then","res","parentCallback","showHide3","success","catch","console","log","render","color","Math","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Progress} from 'reactstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\nvar hash;\n\n\nclass IpfsUpload extends Component {\n    constructor(props) {\n      super(props);\n        this.state = {\n          selectedFile: null,\n          loaded:0\n        }\n    }\n    \n    checkMimeType=(event)=>{\n      //getting file object\n      let files = event.target.files \n      //define message container\n      let err = []\n      // list allow mime type\n     const types = ['image/png', 'image/jpeg', 'image/gif']\n      // loop access array\n      //for(var x = 0; x<files.length; x++) {\n       // compare file type find doesn't matach\n           if (types.every(type => files[0].type !== type)) {\n           // create error message and assign to container   \n           err[0] = files[0].type+' is not a supported format\\n';\n         }\n       //};\n       for(var z = 0; z<err.length; z++) {// if message not same old that mean has error \n           // discard selected file\n          toast.error(err[z])\n          event.target.value = null\n      }\n     return true;\n    }\n    maxSelectFile=(event)=>{\n      let files = event.target.files\n          if (files.length > 1) { \n             const msg = 'Only 1 image can be uploaded at a time'\n             event.target.value = null\n             toast.warn(msg)\n             return false;\n        }\n      return true;\n   }\n   checkFileSize=(event)=>{\n    let files = event.target.files\n    let size = 2000000 \n    let err = []; \n    for(var x = 0; x<files.length; x++) {\n    if (files[x].size > size) {\n     err[x] = files[x].type+'is too large, please pick a smaller file\\n';\n   }\n  };\n  for(var z = 0; z<err.length; z++) {// if message not same old that mean has error \n    // discard selected file\n   toast.error(err[z])\n   event.target.value = null\n  }\n  return true;\n  }\n  onChangeHandler=event=>{\n    var files = event.target.files\n    if(this.maxSelectFile(event) && this.checkMimeType(event) &&    this.checkFileSize(event)){ \n    // if return true allow to setState\n       this.setState({\n       selectedFile: files,\n       loaded:0\n    })\n  }\n  }\n    onClickHandler = () => {\n      const data = new FormData() \n      if(this.state.selectedFile == null){\n        toast.error('You must select a file')\n      } else {\n        for(var x = 0; x<this.state.selectedFile.length; x++) {\n            data.append('file', this.state.selectedFile[x])\n        }\n        //To use locally\n        axios.post(\"http://localhost:8000/upload\", data, {\n        //With heroku\n        //axios.post(\"https://vaultv2.herokuapp.com:8000/upload\", data, {\n            onUploadProgress: ProgressEvent => {\n                this.setState({\n                    loaded: (ProgressEvent.loaded / ProgressEvent.total*100),\n                })\n            },\n        })\n            .then(res => { // then print response status\n                hash = res.data\n                this.props.parentCallback(this.setState({showHide3: true}))\n                toast.success('upload success')\n            })\n            .catch(err => { // then print response status\n                toast.error('upload fail')\n                console.log(err)\n            })\n        }\n      }\n  \n    render() {\n      return (\n        <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"offset-md-3 col-md-6\">\n                 <div className=\"form-group files\">\n                  <label style={{color:\"white\"}}>Upload Your File </label>\n                  <input type=\"file\" className=\"form-control\" multiple onChange={this.onChangeHandler} \n                    style={{\"outline\": \"2px dashed #92b0b3\",\n                        \"outlineOffset\": \"-10px\",\n                        \"WebkitTransition\": \"outline-offset .15s ease-in-out, background-color .15s linear\",\n                        \"transition\": \"outline-offset .15s ease-in-out, background-color .15s linear\",\n                        \"padding\": \"120px 0px 85px 35%\",\n                        \"textAlign\": \"center !important\",\n                        \"backgroundColor\":\"black\",\n                        \"color\":\"white\",\n                        \"margin\": \"0\",\n                        \"width\": \"100% !important\"}}/>\n                </div>  \n                <div className=\"form-group\">\n                <ToastContainer />\n                <Progress max=\"100\" color=\"success\" value={this.state.loaded} >{Math.round(this.state.loaded,2) }%</Progress>\n          \n                </div> \n                \n                <button type=\"button\" className=\"btn btn-success btn-block\" onClick={this.onClickHandler}>Upload</button>\n  \n            </div>\n        </div>\n        </div>\n      );\n    }\n  }\n  export {hash};\n  export default IpfsUpload;"]},"metadata":{},"sourceType":"module"}