{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { sansPrefix } from \"@onflow/fcl\";\nimport { atomFamily, selectorFamily, useRecoilState } from \"recoil\";\nimport { useCurrentUser } from \"../hooks/use-current-user.hook\";\nimport { fetchAccountItem } from \"../flow/script.get-account-item\";\nimport { createSaleOffer } from \"../flow/tx.create-sale-offer\";\nimport { IDLE, PROCESSING } from \"../global/constants\";\nimport { useAccountItems } from \"../hooks/use-account-items.hook\";\nimport { useMarketItems } from \"../hooks/use-market-items.hook\";\nimport { price } from \"../pages/routepages/newNFT.page\";\nvar nftID;\nvar nftPrice;\nexport function getItemID(userID, userPrice) {\n  nftID = userID;\n  nftPrice = userPrice;\n}\n\nfunction expand(key) {\n  return key.split(\"|\");\n}\n\nfunction comp(address, id) {\n  return [address, id].join(\"|\");\n}\n\nexport const $state = atomFamily({\n  key: \"account-item::state\",\n  default: selectorFamily({\n    key: \"account-item::default\",\n    get: key => async () => fetchAccountItem(...expand(key))\n  })\n});\nexport const $status = atomFamily({\n  key: \"account-item::status\",\n  default: IDLE\n});\nexport function useAccountItem(address, id) {\n  _s();\n\n  const [cu] = useCurrentUser();\n  const accountItems = useAccountItems(address);\n  const marketItems = useMarketItems();\n  const key = comp(address, id);\n  const [item, setItem] = useRecoilState($state(key));\n  const [status, setStatus] = useRecoilState($status(key));\n  var p;\n\n  if (price === null) {\n    p = nftPrice;\n  }\n\n  if (nftPrice === null) {\n    p = price;\n  }\n\n  return { ...item,\n    status,\n    forSale: marketItems.has(item),\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\n\n    async sell(p) {\n      await createSaleOffer({\n        itemID: nftID,\n        price: p\n      }, {\n        onStart() {\n          setStatus(PROCESSING);\n        },\n\n        async onSuccess() {\n          accountItems.refresh();\n        },\n\n        async onComplete() {\n          setStatus(IDLE);\n        },\n\n        async onError(error) {// TODO: Handle error\n        }\n\n      });\n    },\n\n    async refresh() {\n      setStatus(PROCESSING);\n      await fetchAccountItem(...expand(key)).then(setItem);\n      setStatus(IDLE);\n    }\n\n  };\n}\n\n_s(useAccountItem, \"Fc5TEWIuNXCpMYosOKhOppF+Ksg=\", false, function () {\n  return [useCurrentUser, useAccountItems, useMarketItems, useRecoilState, useRecoilState];\n});","map":{"version":3,"sources":["/Users/sky/Documents/Vaultv2_meta/web/src/hooks/use-account-item.hook.js"],"names":["sansPrefix","atomFamily","selectorFamily","useRecoilState","useCurrentUser","fetchAccountItem","createSaleOffer","IDLE","PROCESSING","useAccountItems","useMarketItems","price","nftID","nftPrice","getItemID","userID","userPrice","expand","key","split","comp","address","id","join","$state","default","get","$status","useAccountItem","cu","accountItems","marketItems","item","setItem","status","setStatus","p","forSale","has","owned","addr","sell","itemID","onStart","onSuccess","refresh","onComplete","onError","error","then"],"mappings":"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","sourcesContent":["import {sansPrefix} from \"@onflow/fcl\"\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\nimport {fetchAccountItem} from \"../flow/script.get-account-item\"\nimport {createSaleOffer} from \"../flow/tx.create-sale-offer\"\nimport {IDLE, PROCESSING} from \"../global/constants\"\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\nimport {price} from \"../pages/routepages/newNFT.page\"\n\nvar nftID\nvar nftPrice\n\nexport function getItemID(userID, userPrice){\n  nftID = userID\n  nftPrice = userPrice \n}\n\nfunction expand(key) {\n  return key.split(\"|\")\n}\n\nfunction comp(address, id) {\n  return [address, id].join(\"|\")\n}\n\nexport const $state = atomFamily({\n  key: \"account-item::state\",\n  default: selectorFamily({\n    key: \"account-item::default\",\n    get: key => async () => fetchAccountItem(...expand(key)),\n  }),\n})\n\nexport const $status = atomFamily({\n  key: \"account-item::status\",\n  default: IDLE,\n})\n\nexport function useAccountItem(address, id) {\n  const [cu] = useCurrentUser()\n  const accountItems = useAccountItems(address)\n  const marketItems = useMarketItems()\n  const key = comp(address, id)\n  const [item, setItem] = useRecoilState($state(key))\n  const [status, setStatus] = useRecoilState($status(key))\n\n  var p \n\n  if(price === null){\n    p = nftPrice\n  } if (nftPrice === null){\n    p = price\n  }\n\n  return {\n    ...item,\n    status,\n    forSale: marketItems.has(item),\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\n    async sell(p) {\n      await createSaleOffer(\n        {itemID: nftID, price: p},\n        {\n          onStart() {\n            setStatus(PROCESSING)\n          },\n          async onSuccess() {\n            accountItems.refresh()\n          },\n          async onComplete() {\n            setStatus(IDLE)\n          },\n          async onError(error) {\n            // TODO: Handle error\n          },\n        }\n      )\n    },\n    async refresh() {\n      setStatus(PROCESSING)\n      await fetchAccountItem(...expand(key)).then(setItem)\n      setStatus(IDLE)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}